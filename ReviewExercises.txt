#########################################################################
# Use this file to answer Review Exercises from the Big Java textbook
#########################################################################

Eric Meschke
CSPP51036

R1.5 The following are all benefits to using Java over machine code:
1/ Java bytecode is platform independent and may be run on any system that has a JVM. This quality is known as portability.
2/ Java JIT compilers can run efficient Java programs as fast or faster than machine code programs
3/ Java is memory-managed. This reduces about 95% of runtime errors (mostly memory-related) as compared to unmanaged code.
4/ Java was designed for networking and the Internet in mind; and it is generally safer than machine code

R2.3 Write the following math expressions in Java.  It is assumed that all variables are initialized as doubles.
1/ double s = s_0 + v_0 * t + .5 * g * Math.pow(t , 2);
2/ double g = (4 * Math.pow(Math.PI,2) * Math.pow(a,3)) / (Math.pow(p,2) * (m1 + m2));
3/ double fv = pv * Math.pow(1 + (interest/100), years)
4/ double c = Math.sqrt(a*a + b*b - 2*a*b*Math.cos(gamma))

R2.6
1/ 8
2/ 1
3/ 17
4/ 17.5
5/ 17
6/ 18

R2.10
There are errors that occur within the operations (+, -, *, /, etc) because of rounding within the way the methods are
implemented.  Once one is certain that those errors do not effect the precision of the calculations, as in the case
of making change here, the code //System.out.printf("%.2f", change)// will truncate the number to 2 decimal places.

R2.11
1/ 2 is an integer and could be stored as a number in either int or float (double) format.
2/ 2.0 is a number, but could only be stored in float (double) format.
3/ '2' is a character, one of the primitive types.  It is an ascii representation and can't be used as a number.
4/ "2" is a string of length one.  It is an object and the string methods can be used on it.
5. "2.0" is also a string, but of length 3.  It is an object and the string methods can be used on it.

R2.15
Get number = integer input.
Last = number % 10. //Last digit is the number mod 10
Find the floor of the log10 of the number.  //This represents the minimum number of digits in the number.
Raise 10 to the power of the previous line to get 10... number that is the same number of digits as original.
Divide number by the 10... number that was calculated and take the floor of that.  That is the first digit.
Print the first and last digits.

R3.18
Prompt user to enter integer grade.
Check that the score is <= 100.
Create variable for a character or string letter grade.
If score >= 90, letter grade = "A"
Else If score >=80, letter grade = "B"
Else If score >=70, letter grade = "C"
Else If score >=60, letter grade = "D"
Else letter grade = "F"
Print letter grade

R4.9 Java supports three types of loops: for, while, do/while.
1/ for loops are count controlled over a set number of iterations.  This means they execute a set number of times
and are useful when iterating over an object with multiple values (an array) and also when performing an action
for 1:10.
2/ while loops check that a condition is satisfied and then execute the body of the loop.  Importantly, they check
that the condition is true first and then every time subsequently.  They are good for operations where the number of
iterations is unknown as in operations where the loop will iterate until a criteria is met.
3/ do while loops are the same as while loops, except the first iteration the body of the while loop is executed
before the condition is checked.   They are helpful when the purpose is to read in or calculate something for the first
time, and then continue to act while a condition is not yet me.  Input validation for instance.

R4.12
Print first line Celsius | Fahrenheit, formatted correctly
Print divider.  ---------+-----------
For loop that goes from 0 to <= 10
    each iteration, print i (deg celsius) with 7 digits of spacing, divider and then 32 + i*18 with 11 digits of spacing
    //that will make the formatting appear correctly in the table.

R4.15
To change to a while loop.

int i = 1;
int s = 0;
while (i <=10){
    s = s+i;
    i++;
}